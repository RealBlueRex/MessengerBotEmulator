plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.19.0'
}

<<<<<<< Updated upstream
group 'org.beuwi.msgbots'

javafx {
    version = '14.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
=======
java {
	// jdk 14
	sourceCompatibility = JavaVersion.VERSION_14
	targetCompatibility = JavaVersion.VERSION_14
>>>>>>> Stashed changes
}

application {
    mainClassName = "org.beuwi.msgbots.Launcher"
}

repositories {
    mavenCentral()
}

dependencies {
<<<<<<< Updated upstream
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
    implementation group: 'org.mozilla', name: 'rhino', version: '1.7.12'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.8'
    implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.10.4'
    implementation (group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
=======

	// implementation group: 'org.json', name: 'json', version: '20190722'
	implementation group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
	// implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

	implementation group: 'org.mozilla', name: 'rhino', version: '1.7.12'

	implementation group: 'commons-io', name: 'commons-io', version: '2.6'

	implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.8'

	implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.10.4'
	// error: module org.hui1601.emulator reads package org.hamcrest from both hamcrest.core and junit open
	implementation (group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1') {
		exclude group: 'org.hamcrest', module: 'hamcrest-core'
	}
>>>>>>> Stashed changes
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:none"
}

<<<<<<< Updated upstream
run {
    jvmArgs '--add-exports', 'javafx.base/com.sun.javafx.event=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.iio=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.iio.common=ALL-UNNAMED',
            '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED'
=======
jlink {
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

	launcher {
		name = 'Emulator'
	}

	// Instructs the plugin to include all dependencies matching the given prefixes into the merged module. This method is useful when the plugin should handle one or more modular jars as non-modular
	// forceMerge 'javafx'

	mergedModule {
		requires 'java.xml'
		requires 'java.desktop'
		requires 'javafx.graphics'
		requires 'javafx.controls'
	}

	jpackage {
		imageOptions += ['--icon', 'src/main/resources/icons/program.ico']

		installerOptions = [
				'--vendor', 'hui1601',
				'--app-version', version,
		] as List<String>
	}
}
jar {
	manifest {
		attributes 'Main-Class': mainClassName
	}
	from {
		configurations.compile.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
>>>>>>> Stashed changes
}